trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*[Tt]odoApi*/*.csproj'

- stage: Test
  displayName: Test Code
  jobs:
  - job: Testing
    displayName: Test
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DotNetCoreCLI@2
      displayName: Test & Geneate Code Coverage
      inputs:
        command: test
        projects: '**/*[Tt]est*/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'

- stage: PublishCodeCoverage
  displayName: Publish Code Coverage
  dependsOn: Test
  jobs:
  - job: PublishCoverageJob
    displayName: PublishCoverageJob
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: true

- stage: DockerbuildandPublish
  displayName: Docker build and Publish
  jobs:
  - job: DockerbuildandPublishJob
    displayName: Docker build and Publish
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Docker Build and Push 
      inputs:
        containerRegistry: 'azure-docker-connection'
        repository: 'wasishah102/api-mvc-in-mem'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'

- stage: AKS
  displayName: To AKS Stage
  jobs:
  - job: AKSjob
    displayName: to AKS Job
    pool: MyCustomAgentPool
    steps:
 #   - task: CmdLine@2
 #     inputs:
 #       script: |
 #             echo "$(Pipeline.Workspace)"
 #             tree $(Pipeline.Workspace)
 #   - task: CmdLine@2
 #     inputs:
#        script: |
#          echo Write your commands here          
#          cat $(Pipeline.Workspace)/s/TodoApi/manifests/dep.yaml
    - task: CmdLine@2
      inputs:
        script: |
          kubectl config view
    - task: Kubernetes@1
      displayName: 'default config view'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        namespace: 'default'
        command: 'config'
        arguments: 'view'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Kubernetes@1
      displayName: 'config get-context'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        namespace: 'default'
        command: 'config'
        arguments: 'get-contexts'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'    


    - task: Kubernetes@1
      displayName: 'set-context docker-desktop --user=docker-desktop'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        command: 'config'
        arguments: 'set-context docker-desktop --user=docker-desktop'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry' 
    - task: Kubernetes@1
      displayName: 'auth whoami'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        command: 'auth'
        arguments: 'whoami'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry' 

    - task: Kubernetes@1
      displayName: 'config get-contest - again'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        namespace: 'default'
        command: 'config'
        arguments: 'get-contexts'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry' 
    - task: Kubernetes@1
      displayName: 'cluster-info'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        namespace: 'default'
        command: 'cluster-info'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
    - task: Kubernetes@1
      displayName: 'version'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kube-local-cluster-3'
        namespace: 'default'
        command: 'version'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'


    - task: KubernetesManifest@1
      displayName: 'Deploy manifests yaml'
      inputs:
        kubernetesServiceConnection: kube-local-cluster-3
        namespace: default
        manifests: |
           $(Pipeline.Workspace)/s/TodoApi/manifests/dep.yaml
           $(Pipeline.Workspace)/s/TodoApi/manifests/services.yaml
        containers: wasishah102/api-mvc-in-mem
    